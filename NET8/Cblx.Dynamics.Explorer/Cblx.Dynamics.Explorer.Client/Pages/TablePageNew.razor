@page "/tbl/{EntityLogicalName}"
@using System.Text.Json.Nodes;
@using Cblx.Dynamics.Explorer.Client.Components;
@using Cblx.Dynamics.Explorer.Client.Services.DynamicsServices.Metadata.GetEntity;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.Data.Delete;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.ExecuteQuery;
@using System.Web;
@using Microsoft.AspNetCore.Components.QuickGrid
@attribute [RenderModeWebAssembly(false)]
@inject IDialogService DialogService
@inject IGetEntityHandler GetEntityHandler
@inject IExecuteQueryHandler ExecuteQueryHandler
@inject IDeleteHandler DeleteHandler
<PageTitle>@EntityLogicalName</PageTitle>
<SectionContent SectionName="app-bar-content">
    <MudStack Row
               Class="flex-grow-1">
         <AppDynamicsElementName LogicalName="@_entity?.LogicalName" DisplayName="@_entity?.DisplayName" CustomName="@_entity?.CustomName" />
         <MudSpacer></MudSpacer>
         <MudStack Justify="Justify.Center">
             <MudButton Size="Size.Small" Disabled="_error is not null" OnClick="OpenCreate" Variant="Variant.Filled" Color="Color.Primary">New...</MudButton>
         </MudStack>
     </MudStack>
 </SectionContent>
 <div scoped-css>
     @if (_error != null)
    {
        <div class="grid">
            <div style="background-color: red">@_error</div>
        </div>
    }
    @if (_entity is null)
    {
        <div class="grid">
            <div>Loading...</div>
        </div>
    }
    else if (_error is null)
    {
        <div class="grid">
            <QuickGrid 
                @ref="_table" TGridItem="JsonObject" 
                ItemsProvider="ServerReloadJson" 
                Pagination="_pagination">
                <!-- se um dia não tiver mais o mud no projeto, poderíamos ajustar aqui -->
                <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
                    @{
                        var canChange = true;
                    }
                    <MudIconButton OnClick="() => OpenEdit(context)" Disabled="!canChange" Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" Size="Size.Small"></MudIconButton>
                    <MudIconButton OnClick="() => DeleteAsync(context)" Disabled="!canChange" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" Size="Size.Small"></MudIconButton>
                </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>

                @foreach (var attribute in _entity?.Attributes ?? Array.Empty<AttributeDto>())
                {
                    string logicalName = attribute.LogicalName;
                    bool isLookup = attribute.DerivedType == AttributeMetadataDerivedTypes.LookupAttributeMetadata;
                    if (isLookup)
                    {
                        logicalName = $"_{logicalName}_value";
                    }
                    <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn Class="mud-typography mud-typography-caption"
                                                                              Sortable="!isLookup"
                                                                              Title="@(attribute.LogicalName)">
                        <span title="@context[attribute.LogicalName]">@context[logicalName]</span>
                        <br />
                        <span class="mud-tertiary-text mud-typography-caption">@(context[$"{logicalName}@OData.Community.Display.V1.FormattedValue"]?.GetValue<string>())</span>
                    </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
                }
            </QuickGrid>
        </div>
        <Paginator State="_pagination" />
    }
</div>
@code {
    [Parameter]
    [EditorRequired]
    public required string EntityLogicalName { get; set; }
    private string? _previousEntityLogicalName;
    private string? _error = null;
    private Dictionary<string, int> _columnOrders = new();
    //private Guid[] _applicationUsersIds = default!;
    private QuickGrid<JsonObject> _table = default!;
    private EntityDto? _entity = null;
    private PaginationState _pagination = new PaginationState
        {
            ItemsPerPage = 50
        };

    private bool _shouldRefresh = false;
    private string? _lastQuery;
    private GridItemsProviderResult<JsonObject>? _lastProviderResult;
    private async ValueTask<GridItemsProviderResult<JsonObject>> ServerReloadJson(GridItemsProviderRequest<JsonObject> state)
    {
        _error = null;
        try
        {
            var pageSize = state.Count ?? 50;
            var top = state.Count ?? 50;
            var pageIndex = (state.StartIndex / pageSize);
            string query = $"{_entity!.EntitySetName}?$top={top}&$skiptoken=<cookie pagenumber='{pageIndex + 1}' />&$count=true";
            if (state.SortByColumn != null)
            {
                query += $"&$orderby={state.SortByColumn.Title} {(state.SortByAscending ? "asc" : "desc")}";
            }
            if (!_shouldRefresh && query == _lastQuery && _lastProviderResult.HasValue)
            {
                return _lastProviderResult.Value;
            }
            _shouldRefresh = false;
            _lastQuery = query;

            query = HttpUtility.UrlEncode(query);
            var json = await ExecuteQueryHandler.GetAsync(query);
            if (json.HasError())
            {
                Console.WriteLine(json);
                _error = json.GetErrorMessage();
                StateHasChanged();
                return GridItemsProviderResult.From(items: Array.Empty<JsonObject>(), totalItemCount: 0);

            }
            var value = json!["value"]?.AsArray().Select(n => n!.AsObject());
            var count = json["@odata.count"]?.GetValue<int>();
            if (count is null)
            {

                return GridItemsProviderResult.From(items: Array.Empty<JsonObject>(), totalItemCount: 0);
            }
            _lastProviderResult = GridItemsProviderResult.From<JsonObject>(items: value!.ToArray(), totalItemCount: count.Value);
            return _lastProviderResult.Value;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            StateHasChanged();
            return GridItemsProviderResult.From(items: Array.Empty<JsonObject>(), totalItemCount: 0);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (EntityLogicalName == _previousEntityLogicalName) { return; }
        _error = null;
        _entity = null;
        _previousEntityLogicalName = EntityLogicalName;
        _entity = await GetEntityHandler.GetAsync(EntityLogicalName);
    }

    private void ShowOptions(AttributeDto attr)
    {
        DialogService.Show<OptionsDialog>($"{_entity!.LogicalName}.{attr.LogicalName} options", new DialogParameters()
        {
            { "Attribute", attr },
            { "EntityLogicalName", _entity.LogicalName }
        });
    }

    private async Task OpenCreate()
    {
        var dialogRef = DialogService.Show<EditDialog>("", new DialogParameters
        {
            { nameof(EditDialog.EntityLogicalName), EntityLogicalName }
        });
        var result = await dialogRef.Result;
        _shouldRefresh = result.Data is true;
    }

    private async Task OpenEdit(JsonObject item)
    {
        var dialogRef = DialogService.Show<EditDialog>("", new DialogParameters
        {
            { nameof(EditDialog.Id), item[_entity!.PrimaryId!]!.GetValue<Guid>() },
            { nameof(EditDialog.EntityLogicalName), EntityLogicalName }
        });
        var result = await dialogRef.Result;
        _shouldRefresh = result.Data is true;
    }

    private async Task DeleteAsync(JsonObject item)
    {
        var confirmed = await DialogService
            .ShowMessageBox(
                "Delete",
                $"Are you sure you want to delete this {_entity!.CustomName ?? _entity.LogicalName} item?",
                yesText: "Sim",
                noText: "Não"
            );
        if (confirmed is true)
        {
            try
            {
                StateHasChanged();
                await DeleteHandler.DeleteAsync(_entity.EntitySetName, item[_entity.PrimaryId!]!.GetValue<Guid>());
                _shouldRefresh = true;
            }
            catch (Exception ex)
            {
                await DialogService.ShowMessageBox(new MessageBoxOptions
                    {
                        Title = "Error",
                        Message = ex.Message
                    });
                Console.WriteLine(ex);
            }
        }
    }
}

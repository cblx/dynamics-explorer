@using Cblx.Dynamics.Explorer.Client.Components;
@using Cblx.Dynamics.Explorer.Client.Services.DynamicsServices.Metadata.GetEntity;
@inject Microsoft.Fast.Components.FluentUI.IDialogService DialogService
<Microsoft.Fast.Components.FluentUI.FluentStack Orientation="Microsoft.Fast.Components.FluentUI.Orientation.Vertical" VerticalGap="4">
    <Microsoft.Fast.Components.FluentUI.FluentTextField @bind-Value="_filtering" Autofocus Placeholder="Filter..." Style="width: 100%" />
     <Microsoft.Fast.Components.FluentUI.FluentButton OnClick="ApplyFilter">Apply</Microsoft.Fast.Components.FluentUI.FluentButton>
     <Microsoft.Fast.Components.FluentUI.FluentDivider Style="width: 100%;" Role="Microsoft.Fast.Components.FluentUI.DividerRole.Presentation" />
     <Microsoft.Fast.Components.FluentUI.FluentLabel>@Attribute.LogicalName</Microsoft.Fast.Components.FluentUI.FluentLabel>
     <Microsoft.Fast.Components.FluentUI.FluentLabel Color="Microsoft.Fast.Components.FluentUI.Color.Info">@Attribute.DisplayName</Microsoft.Fast.Components.FluentUI.FluentLabel>
     <Microsoft.Fast.Components.FluentUI.FluentDivider Style="width: 100%;" Role="Microsoft.Fast.Components.FluentUI.DividerRole.Presentation" />
     <Microsoft.Fast.Components.FluentUI.FluentStack>
         <Microsoft.Fast.Components.FluentUI.FluentLabel Color="Microsoft.Fast.Components.FluentUI.Color.Info">@(Attribute.AttributeType)</Microsoft.Fast.Components.FluentUI.FluentLabel>
         <Microsoft.Fast.Components.FluentUI.FluentDivider Orientation="Microsoft.Fast.Components.FluentUI.Orientation.Vertical" />
         <Microsoft.Fast.Components.FluentUI.FluentLabel Color="Microsoft.Fast.Components.FluentUI.Color.Info">@((Attribute.DerivedType ?? "Not derived").Split('.').Last())</Microsoft.Fast.Components.FluentUI.FluentLabel>
     </Microsoft.Fast.Components.FluentUI.FluentStack>
     <Microsoft.Fast.Components.FluentUI.FluentDivider Style="width: 100%;" Role="Microsoft.Fast.Components.FluentUI.DividerRole.Presentation" />
     @if (Attribute.DerivedType is AttributeMetadataDerivedTypes.MultiSelectPicklistAttributeMetadata
    or AttributeMetadataDerivedTypes.StatusAttributeMetadata
    or AttributeMetadataDerivedTypes.StateAttributeMetadata
    or AttributeMetadataDerivedTypes.PicklistAttributeMetadata
    )
    {
        <Microsoft.Fast.Components.FluentUI.FluentButton OnClick="ShowOptions">Show options list</Microsoft.Fast.Components.FluentUI.FluentButton>
    }
</Microsoft.Fast.Components.FluentUI.FluentStack>
@code {
    private string _filtering = "";
    [Parameter] public required AttributeDto Attribute { get; set; }
    [Parameter] public required string CurrentFilter { get; set; }
    [Parameter] public EventCallback<string> OnFilterApplied { get; set; }
    protected override void OnInitialized()
    {
        _filtering = CurrentFilter;
    }

    private void ApplyFilter()
    {
        OnFilterApplied.InvokeAsync(_filtering);
    }

    private async Task ShowOptions()
    {
        await DialogService.ShowDialogAsync<OptionsDialog>(Attribute, new Microsoft.Fast.Components.FluentUI.DialogParameters { });
    }

}

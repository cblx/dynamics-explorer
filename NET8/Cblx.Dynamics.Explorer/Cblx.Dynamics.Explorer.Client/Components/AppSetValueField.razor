@using Cblx.Dynamics.Explorer.Client.Services.DynamicsServices.Metadata.GetEntity;
@using Cblx.Dynamics.Explorer.Models;
@using System.Linq.Expressions;
@using Cblx.Dynamics.Explorer.Shared.Converters;
@using Cblx.Dynamics.Explorer.Shared;
@if (Set.Attribute is null)
{
    <MudText Align="Align.Center">Choose column</MudText>
}
else
{
    var attribute = Set.Attribute;

    switch (attribute)
    {
        case { AttributeType: "Uniqueidentifier" }:
            <AppSetStringField Set="Set" />
            break;
        case { DerivedType: AttributeMetadataDerivedTypes.LookupAttributeMetadata }:
            <AppSetNavigationField Set="Set" />
            break;
        case { DerivedType: AttributeMetadataDerivedTypes.PicklistAttributeMetadata
                or AttributeMetadataDerivedTypes.StateAttributeMetadata
                or AttributeMetadataDerivedTypes.StatusAttributeMetadata }:
           <AppSetPicklistField Set="Set" />
            break;
        case { DerivedType: AttributeMetadataDerivedTypes.MultiSelectPicklistAttributeMetadata }:
            <AppSetMultiSelectPicklistField Set="Set" />
            break;
        case { DerivedType: AttributeMetadataDerivedTypes.StringAttributeMetadata }:
            <AppSetStringField Set="Set" />
            break;
        case { DerivedType: AttributeMetadataDerivedTypes.IntegerAttributeMetadata }:
            <Microsoft.Fast.Components.FluentUI.FluentNumberField Style="width: 100%" Immediate @bind-Value="Set.ValueAsInt32"/>
            break;
        case { DerivedType: AttributeMetadataDerivedTypes.BigIntAttributeMetadata }:
            <Microsoft.Fast.Components.FluentUI.FluentNumberField Style="width: 100%" Immediate @bind-Value="Set.ValueAsInt64" />
            break;
        case { DerivedType: AttributeMetadataDerivedTypes.BooleanAttributeMetadata }:
            <MudCheckBox @bind-Checked="Set.ValueAsBoolean" TriState Label="Value" />
            <div class="mud-input-control-helper-container px-2">
                <p class="mud-input-helper-text">
                    <div class="d-flex">
                        <div class="me-auto">@Set.ValueHelperText</div>
                    </div>
                </p>
            </div>
            break;
        case { DerivedType: AttributeMetadataDerivedTypes.DateTimeAttributeMetadata, DateTimeFormat: DateTimeFormat.DateAndTime }:
            <AppSetDateTimeField Set="Set"/>
            break;
        case { DerivedType: AttributeMetadataDerivedTypes.DateTimeAttributeMetadata, DateTimeFormat: DateTimeFormat.DateOnly }:
            <MudTextField @bind-Value="Set.ValueAsDateOnly"
                          InputType="InputType.Date"
                          Variant="Variant.Outlined"
                          Placeholder="NULL"
                          HelperText="@Set.ValueHelperText"
                          Converter="new AppDateOnlyIsoConverter()"
                          Label="Value" />
            break;
        case { DerivedType: AttributeMetadataDerivedTypes.DecimalAttributeMetadata }:
            <MudNumericField @bind-Value="Set.ValueAsDecimal"
                             Variant="Variant.Outlined"
                             Placeholder="NULL"
                             HelperText="@Set.ValueHelperText"
                             Label="Value" />
            break;
        case { DerivedType: AttributeMetadataDerivedTypes.DoubleAttributeMetadata }:
            <MudNumericField @bind-Value="Set.ValueAsDouble"
                             Variant="Variant.Outlined"
                             Placeholder="NULL"
                             HelperText="@Set.ValueHelperText"
                             Label="Value" />
            break; 
        default:
            <MudText Color="Color.Error">Unsupported</MudText>
            break;
    }
}
@code {
    [Parameter]
    [EditorRequired]
    public required EditDialogSet Set { get; set; }
}

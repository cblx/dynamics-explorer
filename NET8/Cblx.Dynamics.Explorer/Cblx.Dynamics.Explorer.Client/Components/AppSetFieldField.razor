@using Cblx.Dynamics.Explorer.Client.Services.DynamicsServices.Metadata.GetEntity;
@using Cblx.Dynamics.Explorer.Models;
@using Cblx.Dynamics.Explorer.Shared;
<div>
    <MudSelect Variant="Variant.Outlined"
               Label="Field" @bind-Value="Set.Attribute" @bind-Value:after="AfterChange">
        @foreach (var attr in Entity.Attributes
        .Where(c => c.IsEditable)
        .Where(c => c == Set.Attribute || !Sets.Any(s => s.Attribute == c)))
        {
            <MudSelectItem Value="attr">
                <MudStack Spacing="0" Style="margin-top: -4px">
                    <MudStack Class="flex-grow-1" Spacing="0">
                        <MudText Typo="Typo.caption" Color="Color.Primary">@attr.LogicalName</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Style="white-space: nowrap">@(attr.DisplayName ?? "-")</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Tertiary">@(attr.CustomName ?? "-")</MudText>
                            <MudStack Row>
                        <MudText Typo="Typo.caption" Color="Color.Warning">@attr.AttributeType</MudText>
                        <MudText Typo="Typo.caption" Style="color: gray;">@((attr.DerivedType ?? "-").Split('.').Last())</MudText>
                            </MudStack>

                        </MudStack>
                    </MudStack>
                </MudSelectItem>
        }
    </MudSelect>
</div>
@code {
    [Parameter]
    [EditorRequired]
    public EntityDto Entity { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public EditDialogSet Set { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<EditDialogSet> Sets { get; set; } = default!;

    [Parameter]
    public EventCallback OnChange { get; set; }

    public void AfterChange()
    {
        Set.Value = null;
        OnChange.InvokeAsync(null);

    }
}

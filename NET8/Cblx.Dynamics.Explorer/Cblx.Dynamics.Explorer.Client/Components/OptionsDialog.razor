@using System.Text.Json.Nodes
@using Cblx.Dynamics
@using System.Net.Http.Json
@using Cblx.Dynamics.Explorer.Client.Services.DynamicsServices.Metadata.GetEntity;
@using Cblx.Dynamics.Explorer.Models;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.Metadata.ListOptionsHandler;
@using Microsoft.Fast.Components.FluentUI;
@implements IDialogContentComponent<AttributeDto>
@inject IListOptionsHandler ListOptionsHandler
<FluentDialogBody>
    @if (_loading)
    {
        <div>Loading...</div>
    }
    else
    {
        if (!_options.Any())
        {
            <MudAlert>No options for this column</MudAlert>
        }
        else
        {
            <MudList>
                @foreach (var option in _options)
                {
                    <MudListItem>@option.Value - @option.Text</MudListItem>
                }
            </MudList>
        }
    }
</FluentDialogBody>
<FluentDialogFooter Visible="false"/>
@code {
    private bool _loading = true;
    private PicklistOption[] _options = Array.Empty<PicklistOption>();

    [Parameter]
    public required AttributeDto Content { get; set; }

    [CascadingParameter]
    FluentDialog Dialog { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _options = await ListOptionsHandler.GetAsync(Content.EntityLogicalName, Content.LogicalName, Content.DerivedType!);
        }
        //catch
        //{
        //    // Do nothing
        //}
        finally
        {
            _loading = false;
        }
    }
}
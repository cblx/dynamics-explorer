@attribute [RenderModeWebAssembly(false)]
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.ListTablesForMenu;
@inject IListEntitiesForMenuHandler Handler
<div style="overflow-x: hidden; height: calc(100vh - 101px); overflow-y:scroll;">
    <div class="menu-header" style="position: sticky; top: 0; background-color: var(--fill-color); z-index: 1;">
        <FluentNavMenuLink Href="/">Query</FluentNavMenuLink>
        @* <FluentNavMenuLink Href="/diagram">Diagram</FluentNavMenuLink> *@
        <FluentTextField @bind-Value="_filter" Immediate Placeholder="Filter entities..." />
         <Density Value="-3">
             <FluentStack>
                 <FluentLabel> showing @(_displayedEntities.Count()) entities</FluentLabel>
                 <FluentButton ParentReference="context" IconEnd="@(new Icons.Regular.Size16.ArrowSync())" OnClick="LoadAsync" />
             </FluentStack>
         </Density>
        <FluentDivider Style="position: sticky; top: 0" />
     </div>
     @foreach (var tbl in _displayedEntities)
    {
        <FluentNavMenuLink Href="@($"tbl/{tbl.LogicalName}")" title="@tbl.LogicalName">

            <FluentStack Orientation="Orientation.Vertical"
                         VerticalGap="0" Style="pointer-events: none; width: 160px; overflow: hidden; text-overflow: ellipsis">
                <FluentLabel Style="text-overflow: ellipsis; overflow: hidden; width: 100%; line-height: 1">@tbl.LogicalName</FluentLabel>
                <FluentLabel Color="Color.Info" Style="font-size: 0.7rem; text-overflow: ellipsis; overflow: hidden; width: 100%;line-height: 1;">@(tbl.DisplayName ?? "-")</FluentLabel>
            </FluentStack>
        </FluentNavMenuLink>
    }

    <FluentOverlay Opacity="0.4"
                   Dismissable="false"
                   Visible="_loading" />
</div>
@code {
    private bool _loading = true;
    private EntityDto[] _entities = Array.Empty<EntityDto>();
    private string _filter = string.Empty;
    private EntityDto[] _displayedEntities
           => _entities.Where(
               t => t.DisplayName?.Contains(_filter, StringComparison.OrdinalIgnoreCase) is true
                   || t.LogicalName?.Contains(_filter, StringComparison.OrdinalIgnoreCase) is true).ToArray();


    protected override async Task OnInitializedAsync() => await LoadAsync();
    private async Task LoadAsync()
    {

        try
        {
            _loading = true;
            _entities = await Handler.GetAsync();
        }
        finally
        {
            _loading = false;
        }
    }
}
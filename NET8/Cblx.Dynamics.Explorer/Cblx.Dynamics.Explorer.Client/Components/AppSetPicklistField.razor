@using System.Net.Http.Json;
@using System.Text.Json.Nodes;
@using Cblx.Dynamics.Explorer.Models;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.Metadata.ListPicklistOptions;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.Metadata.ListStateCodeOptions;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.Metadata.ListStatusCodeOptions;
@using Cblx.Dynamics.Explorer.Shared;
@using Microsoft.Fast.Components.FluentUI
@inject IListPicklistOptionsHandler ListPicklistOptionsHandler
@inject IListStateCodeOptionsHandler ListStateCodeOptionsHandler
@inject IListStatusCodeOptionsHandler ListStatusCodeOptionsHandler
@if (_options != null)
{
    <FluentStack Orientation="Microsoft.Fast.Components.FluentUI.Orientation.Vertical" VerticalGap="0">
        <FluentSelect Items=@_options
                      TOption="Option<int?>"
                      Width="100%"
                      OptionText="@(i => _picklistOptions!.Find(o => o.Value == i.Value)!.Text)"
                      OptionValue="@(i => i.Value.ToString())"
                      @bind-SelectedOption="@_selectedIntOption"
                      Value="@Set.ValueAsString"
                      ValueChanged="str => Set.ValueAsInt32 = str is null ? null : int.Parse(str)" />
        <FluentLabel Typo="Microsoft.Fast.Components.FluentUI.Typography.Body" Color="Microsoft.Fast.Components.FluentUI.Color.Info">@Set.ValueHelperText</FluentLabel>
    </FluentStack>
}
else
{
    <FluentLabel>Loading...</FluentLabel>
}
@code {
    [Parameter]
    [EditorRequired]
    public required EditDialogSet Set { get; set; }
    private Option<int?>[]? _options = null;
    private Option<int?>? _selectedIntOption;
    private PicklistOption[]? _picklistOptions = null;
    protected override async Task OnInitializedAsync()
    {
        var attribute = Set.Attribute;
        if (attribute!.LogicalName == "statuscode")
        {
            _picklistOptions = await ListStatusCodeOptionsHandler.GetAsync(attribute.EntityLogicalName);
        }
        else if (attribute.LogicalName == "statecode")
        {
            _picklistOptions = await ListStateCodeOptionsHandler.GetAsync(attribute.EntityLogicalName);
        }
        else
        {
            _picklistOptions = await ListPicklistOptionsHandler.GetAsync(attribute.EntityLogicalName, attribute.LogicalName);
        }
        _options = _picklistOptions.Select(pko => new Option<int?> { Text = pko.Value, Value = pko.Value }).ToArray();

    }
}

@using System.Net.Http.Json;
@using System.Text.Json.Nodes;
@using Cblx.Dynamics.Explorer.Models;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.Metadata.ListPicklistOptions;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.Metadata.ListStateCodeOptions;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.Metadata.ListStatusCodeOptions;
@using Cblx.Dynamics.Explorer.Shared;
@inject IListPicklistOptionsHandler ListPicklistOptionsHandler
@inject IListStateCodeOptionsHandler ListStateCodeOptionsHandler
@inject IListStatusCodeOptionsHandler ListStatusCodeOptionsHandler
@if (_picklistOptions != null)
{
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
        <FluentSelect Items=@_picklistOptions
                      TOption="PicklistOption"
                      Width="100%"
                      OptionText="@(opt => opt.Text)"
                      SelectedOption="@_selectedOption"
                      SelectedOptionChanged="@(opt => { _selectedOption = opt; Set.Value = _selectedOption.Value is int.MinValue ? null : _selectedOption.Value; })"/>
        <FluentLabel Typo="Typography.Body" Color="Color.Info">@Set.ValueHelperText</FluentLabel>
    </FluentStack>
}
else
{
    <FluentLabel>Loading...</FluentLabel>
}
@code {
    [Parameter]
    [EditorRequired]
    public required EditDialogSet Set { get; set; }
    private PicklistOption? _selectedOption;
    private PicklistOption?[]? _picklistOptions = null;
    protected override async Task OnInitializedAsync()
    {
        var attribute = Set.Attribute;
        if (attribute!.LogicalName == "statuscode")
        {
            _picklistOptions = await ListStatusCodeOptionsHandler.GetAsync(attribute.EntityLogicalName);
        }
        else if (attribute.LogicalName == "statecode")
        {
            _picklistOptions = await ListStateCodeOptionsHandler.GetAsync(attribute.EntityLogicalName);
        }
        else
        {
            _picklistOptions = await ListPicklistOptionsHandler.GetAsync(attribute.EntityLogicalName, attribute.LogicalName);
        }
        _picklistOptions = new PicklistOption?[] { new PicklistOption()
        {
            Text = "NULL",
            Value = int.MinValue
        } }.Union(_picklistOptions).ToArray();
        _selectedOption = _picklistOptions.First(); // NULL
        if(Set.ValueAsInt32 is not null)
        {
            _selectedOption = _picklistOptions.FirstOrDefault(opt => opt.Value == Set.ValueAsInt32);
        }
    }
}

@page "/"
@using System.Net.Http.Json;
@using System.Text.Json.Nodes;
@using System.Text.Json;
@using System.Text.RegularExpressions;
@using System.Web;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.ExecuteQuery;
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject HttpClient Http
<PageTitle>Query</PageTitle>
<SectionContent SectionName="app-bar-content">
    <FluentDesignSystemProvider TypeRampBaseFontSize="11px" Density="-2">
        <FluentButton Disabled="_searching" IconEnd="@(new Icons.Regular.Size16.Play())" Title="Execute" OnClick="Execute" />
    </FluentDesignSystemProvider>
</SectionContent>
<FluentSplitter 
    Style="height: 100%; overflow: hidden"
    Orientation="Orientation.Vertical" 
    OnResized="OnResized"
    Panel1Size="20%" 
    Panel2Size="80%">
    <Panel1>
        <div style="height: 100%; overflow: hidden">
            <div @ref="_editorContainer" style="height: 100%"></div>
        </div>
    </Panel1>
    <Panel2>
        @if (!string.IsNullOrWhiteSpace(_error))
        {
            <FluentLabel Color="Color.Error">@_error</FluentLabel>
        }
        @if(_searching && !_resultSets.Any())
        {
            <FluentProgressRing Size="Size.Size16" />
        }
        @* else if (!_items.Any()) {
            <div>No result</div>
        } *@
        else{
            <div class="result-sets">
                @foreach (var resultSet in _resultSets)
                {
                    <div>
                        <table style="border-spacing: 0; border-collapse: separate;" cellpadding="0" cellspacing="0">
                            <thead style="position: sticky; 
                                      top: 0; background-color: var(--neutral-layer-3); 
                                      z-index: 100">
                                <tr>
                                    <th></th>
                                    @foreach (var item in resultSet.First().Skip(2))
                                    {
                                        <th>
                                            @(string.IsNullOrEmpty(item.Key) ? "(no name)" : item.Key)
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody>

                                @if (resultSet.Count == 1 && resultSet.First()["isEmptyRow"]!.GetValue<bool>()) // empty row
                                {
                                    <tr>
                                        <td colspan="@(resultSet.First().Count - 2)">
                                            <FluentLabel>No results</FluentLabel>
                                        </td>
                                    </tr>

                                }
                                else{
                                    <Virtualize Items="resultSet" OverscanCount="20">
                                        <tr @key="context">
                                            <td>@(resultSet.IndexOf(context) + 1)</td>
                                            @foreach (var field in context.Skip(2))
                                            {
                                                <td @key="field">
                                                    @field.Value
                                                </td>
                                            }
                                        </tr>
                                    </Virtualize>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        }
    </Panel2>
</FluentSplitter>
@code {
    private string _query = "accounts";
    private string[] _json = Array.Empty<string>();
    private string _strJson = "";
    private bool _searching = false;
    private string? _error = null;
    private List<List<JsonObject>> _resultSets = new ();

    private IJSObjectReference? _queryPageModule;
    private IJSObjectReference? _editorJsReference;
    private ElementReference? _editorContainer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _queryPageModule = await JS.InvokeAsync<IJSObjectReference>("import", $"./Pages/{nameof(QuerySqlPage)}.razor.js");
            _editorJsReference = await _queryPageModule.InvokeAsync<IJSObjectReference>($"{nameof(QuerySqlPage)}.initializeEditor", _editorContainer);
        }
    }

    private async Task Execute()
    {
        HttpResponseMessage? responseMessage = null;
        _error = null;
        _resultSets.Clear();
        _searching = true;
        try
        {
            var query = await _editorJsReference!.InvokeAsync<string>("getValue");
            responseMessage = await Http.PostAsJsonAsync("api/ExecuteSqlQueryHandler", query);
            // read async enumerable from response
            // var resultSet = new List<JsonObject>();
            // _resultSets.Add(resultSet);
            await foreach (var item in responseMessage.Content.ReadFromJsonAsAsyncEnumerable<JsonObject>())
            {
                var resultSetIndex = item!["resultSet"]!.GetValue<int>();
                if (_resultSets.Count < resultSetIndex + 1)
                {
                    _resultSets.Add(new List<JsonObject>());
                }
                var items = _resultSets[resultSetIndex];
                items.Add(item);
                if(items.Count % 500 == 0){
                     await Task.Delay(1);
                     StateHasChanged();
                }
            }
        }
        catch(Exception ex)
        {
            try
            {
                if (responseMessage is not null)
                {
                    _error = await responseMessage.Content.ReadAsStringAsync();
                }
            }
            catch
            {
                _error = ex.Message;
            }
        }
        finally
        {
            _searching = false;
        }
    }

    private async Task OnResized(SplitterResizedEventArgs _)
    {
        if(_editorJsReference is null){ return; }
        await _editorJsReference.InvokeVoidAsync("layout");
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_queryPageModule is not null)
        {
            await _queryPageModule.DisposeAsync();
        }
        if (_editorJsReference is not null)
        {
            await _editorJsReference.DisposeAsync();
        }
    }
}

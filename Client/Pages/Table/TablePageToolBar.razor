@using Cblx.Dynamics.Explorer.Client.Components;
@using Cblx.Dynamics.Explorer.Client.Services.DynamicsServices.Metadata.GetEntity;
@using Cblx.Dynamics.Explorer.Client.Services.DynamicsServices.Metadata.ListInstances
@inject IDialogService DialogService
@if (Entity != null)
{
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <div style="font-size: 11px">
            <div>@Entity.LogicalName <span style="color: gray">@(Entity.DisplayName ?? "-")</span></div>
        </div>
        <FluentDivider Style="height: 30px" Role="DividerRole.Presentation" Orientation="Orientation.Vertical" />
        <div>
            <FluentDesignSystemProvider TypeRampBaseFontSize="11px" Density="-2">
                <FluentButton Id="@_guid.ToString()"
                              Appearance="Appearance.Lightweight"
                              OnClick="() => _showColumnSelection = !_showColumnSelection">
                    Select columns... (@ShowingColumns.Count() of @Entity.Attributes.Length)
                </FluentButton>
            </FluentDesignSystemProvider>
            <FluentPopover Style="width: 300px; height: 480px; overflow-y: auto" AnchorId="@_guid.ToString()" @bind-Open="_showColumnSelection">
                <Body>
                    <FluentStack Orientation="Orientation.Vertical">
                        @foreach (var attr in Entity.Attributes)
                        {
                            <FluentCheckbox Disabled="attr.IsPrimaryId"
                                            Value="@ShowingColumns.Contains(attr)"
                                            ValueChanged="isChecked => ToggleShowingColumn(attr, isChecked)">
                                @attr.LogicalName
                                <br />
                                <FluentLabel Color="Color.Info">@attr.DisplayName</FluentLabel>
                            </FluentCheckbox>
                            <FluentDivider />
                        }
                    </FluentStack>
                </Body>
            </FluentPopover>
        </div>
        <FluentSpacer />
        <FluentDesignSystemProvider TypeRampBaseFontSize="11px" Density="-2">
            <FluentButton Disabled="@(Disabled || Instance.Access != "write")"
                          Appearance="Appearance.Accent"
                          IconEnd="new Icons.Filled.Size16.Add()"
                          OnClick="OpenCreate"></FluentButton>
        </FluentDesignSystemProvider>
    </FluentStack>
}
@code {
    [CascadingParameter]
    private InstanceDto Instance { get; set; } = default!;

    private Guid _guid = Guid.NewGuid();
    private bool _showColumnSelection = false;
    [Parameter]
    public required EntityDto? Entity { get; set; }
    [Parameter]
    public required List<AttributeDto> ShowingColumns { get; set; }
    [Parameter]
    public required bool Disabled { get; set; }
    [Parameter]
    public EventCallback OnChanges { get; set; }


    private async Task OpenCreate()
    {
        var dialogRef = await DialogService.ShowDialogAsync<AppEditDialog>(new AppEditDialogArguments
            {
                EntityLogicalName = Entity!.LogicalName,
                Id = null
            }, AppEditDialog.DialogParameters);
        var result = await dialogRef.Result;
        if (result.Cancelled) { return; }
        await OnChanges.InvokeAsync();
    }

    private async Task ToggleShowingColumn(AttributeDto attribute, bool isChecked)
    {
        if (isChecked && !ShowingColumns.Contains(attribute))
        {
            ShowingColumns.Add(attribute);
        }
        if (!isChecked && ShowingColumns.Contains(attribute))
        {
            ShowingColumns.Remove(attribute);
        }
        await OnChanges.InvokeAsync();
    }
}

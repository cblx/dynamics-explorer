@page "/"
@using System.Net.Http.Json;
@using System.Text.Json.Nodes;
@using System.Text.Json;
@using System.Text.RegularExpressions;
@using System.Web;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.ExecuteQuery;
@inject IExecuteQueryHandler Handler
@inject AppBarService AppBarService
<MudStack Class="px-4">
    <MudTextField Label="GET" Lines="10" @bind-Value="_query" />
    <MudStack AlignItems="AlignItems.Start">
        <MudButton Disabled="_searching" Color="Color.Primary" Variant="Variant.Filled" OnClick="RunAsync">Run</MudButton>
    </MudStack>
    @if (_searching)
    {
        <MudProgressCircular Size="Size.Small" Indeterminate />
    }
    else
    {
        @if (_error != null)
        {
            @_error
        }
        else
        {
            <MudPaper>
                <Virtualize Items="_json">
                    <div style="white-space: pre">
                        @context
                    </div>
                </Virtualize>
            </MudPaper>
        }
    }
</MudStack>
@code {
    private string _query = "accounts";
    private string[] _json = Array.Empty<string>();
    private bool _searching = false;
    private string? _error = null;
    protected override void OnInitialized()
    {
        AppBarService.SetContent(@<div>Queries</div>);
    }
    public async Task RunAsync()
    {
        _searching = true;
        _error = null;
        try
        {
            var json = await Handler.GetAsync(_query);
            var strJson = JsonSerializer.Serialize(json, new JsonSerializerOptions { WriteIndented = true });
            _json = strJson.ToString().Split(Environment.NewLine);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _searching = false;
        }
    }
}

@using System.Text.Json.Nodes
@using Cblx.Dynamics
@using System.Net.Http.Json
@using Cblx.Dynamics.Explorer.Models;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.ListEntityAttributes;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.Metadata.ListOptionsHandler;
@inject IListOptionsHandler ListOptionsHandler
<MudDialog>
    <DialogContent>
        @if (_loading)
        {
            <MudProgressCircular Indeterminate></MudProgressCircular>
        }
        else
        {
            if (!_options.Any())
            {
                <MudAlert>No options for this column</MudAlert>
            }
            else
            {
                <MudList>
                    @foreach (var option in _options)
                    {
                        <MudListItem>@option.Value - @option.Text</MudListItem>
                    }
                </MudList>
            }
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="() => MudDialog.Close()">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _loading = true;
    private PicklistOption[] _options = Array.Empty<PicklistOption>();

    [Parameter]
    public required AttributeDto Attribute { get; set; }

    [Parameter]
    public required string EntityLogicalName { get; set; }

    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _options = await ListOptionsHandler.GetAsync(EntityLogicalName, Attribute.LogicalName, Attribute.DerivedType!);
        }
        //catch
        //{
        //    // Do nothing
        //}
        finally
        {
            _loading = false;
        }
    }
}
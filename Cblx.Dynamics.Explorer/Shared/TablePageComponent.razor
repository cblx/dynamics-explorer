@using Cblx.Dynamics.Explorer.Models;
@using Cblx.Dynamics.Explorer.Services;
@using Microsoft.AspNetCore.Components.Rendering;
@using System.Linq.Expressions;
@using System.Reflection;
@using System.Text.Json.Nodes;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http.Json;
@inject IDialogService DialogService
@inject ApplicationService ApplicationService
@inject SchemaService SchemaService
@inject HttpClient HttpClient
@inject AppBarService ToolbarService
<PageTitle>@Table.DisplayName</PageTitle>
<div scoped-css>
    <MudTable @ref="_table" ServerData="@(new Func<TableState, Task<TableData<JsonObject>>>(ServerReloadJson))"
                FixedHeader
                FixedFooter
                Bordered
    @bind-Loading="_loading"
              Height="calc(100vh - 100px)"
                Dense Hover>
        <ColGroup>
            <col style="width: 150px" />
        </ColGroup>
        <HeaderContent>
            <MudTh></MudTh>
            @foreach (var col in Table.Columns)
            {
               @* if (col.Name.EndsWith(".FormattedValue")) { continue; }
                if (_hiddenColumns.Contains(col.Name)) { continue; }*@
                <MudTh>
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudStack Spacing="0">
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudText Color="Color.Secondary">@col.DisplayName</MudText>
                                @*<MudText Style="color: gray !important" Typo="Typo.caption">@col.FriendlyType</MudText>*@
                            </MudStack>
                            <MudStack Row>
                            <MudText Typo="Typo.caption">@col.OriginalName</MudText>
                            <MudText Style="color: gray !important" Typo="Typo.caption">@col.TypeName</MudText>
                        </MudStack>
                    </MudStack>
                        @if (col.TypeName is "Edm.Int32" or "Edm.String")
                        {
                            <MudMenu Icon="@Icons.Material.Filled.Menu" AnchorOrigin="Origin.BottomLeft">
                                <MudMenuItem OnClick="() => ShowOptions(col)">Show options list</MudMenuItem>
                            </MudMenu>
                        }
                        <MudTableSortLabel SortLabel="@col.OriginalName" T="JsonObject">
                            <MudIcon Icon="@Icons.Material.Filled.Sort"></MudIcon>
                        </MudTableSortLabel>
                    </MudStack>
                </MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudStack Row>
                    @{
                        //var createdById = context["_createdby_value"]?.GetValue<Guid?>().GetValueOrDefault() ?? Guid.Empty;
                        var canChange = true; //TableType != null && _applicationUsersIds.Contains(createdById);
                    }
                    <MudIconButton OnClick="() => OpenEdit(context)" Disabled="!canChange" Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" Size="Size.Small"></MudIconButton>
                    <MudIconButton OnClick="() => DeleteAsync(context)" Disabled="!canChange" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" Size="Size.Small"></MudIconButton>
                </MudStack>
            </MudTd>
            @foreach (var col in Table.Columns)
            {
                //if (col.Name.EndsWith(".FormattedValue")) { continue; }
                //if (_hiddenColumns.Contains(col.Name)) { continue; }
                <MudTd DataLabel="@(col.DisplayName)">
                    @{
                        var value = context[col.OriginalName];
                        string formattedValueName = $"{col.OriginalName}@OData.Community.Display.V1.FormattedValue";
                        string? formattedValue = context.ContainsKey(formattedValueName) ? context[formattedValueName]?.GetValue<string>() : null;
                        if (value is null)
                        {
                            <MudText Typo="Typo.caption" Style="font-style: italic; color: gray">NULL</MudText>
                        }
                        else
                        {
                            <MudStack Spacing="0">
                                <MudTooltip Text="@value.ToString()">
                                    <MudText Typo="Typo.overline">@value.ToString()</MudText>
                                </MudTooltip>
                                <MudTooltip Text="@formattedValue">
                                    <MudText Color="Color.Tertiary" Typo="Typo.caption">@formattedValue</MudText>
                                </MudTooltip>
                            </MudStack>
                        }
                    }
                </MudTd>
            }
            @*@foreach (var col in _jsonColumns)
            {
                if (col.Name.EndsWith(".FormattedValue")) { continue; }
                if (_hiddenColumns.Contains(col.Name)) { continue; }
                <MudTd DataLabel="@(col.FriendlyName ?? col.Name)">
                    @{
                        var value = context[col.Name];
                        string formattedValueName = $"{col.Name}@OData.Community.Display.V1.FormattedValue";
                        string? formattedValue = context.ContainsKey(formattedValueName) ? context[formattedValueName]?.GetValue<string>() : null;
                        if (value is null)
                        {
                            <MudText Typo="Typo.caption" Style="font-style: italic; color: gray">NULL</MudText>
                        }
                        else
                        {
                            <MudStack Spacing="0">
                                <MudTooltip Text="@value.ToString()">
                                    <MudText Typo="Typo.overline">@value.ToString()</MudText>
                                </MudTooltip>
                                <MudTooltip Text="@formattedValue">
                                    <MudText Color="Color.Tertiary" Typo="Typo.caption">@formattedValue</MudText>
                                </MudTooltip>
                            </MudStack>
                        }
                    }
                </MudTd>
            }*@
        </RowTemplate>
        <NoRecordsContent>
            @if (Error != null)
            {
                <MudAlert Severity="Severity.Error">@Error</MudAlert>
            }
            else
            {
                <MudAlert Severity="Severity.Warning">Empty table</MudAlert>
            }
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>
@code {
    [Parameter]
    [EditorRequired]
    public required TableInfo Table { get; set; }

    //[Parameter]
    //public Type? TableType { get; set; }
    //[Parameter]
    //public string? InternalName { get; set; }

    private string? Error = null;

    //private string? Name => TableType?.Name ?? InternalName;
    //private string? _endpoint;
    //private JsonColumnInfo[] _jsonColumns = Array.Empty<JsonColumnInfo>();
    private Dictionary<string, PropertyInfo> _properties = new();
    private Dictionary<string, int> _columnOrders = new();
    private Guid[] _applicationUsersIds = default!;
    private MudTable<JsonObject> _table = default!;
    private bool _loading = false;
    private readonly string[] _hiddenColumns = new string[]
        {
      "@odata.etag",
      "_owningbusinessunit_value",
      "_ownerid_value",
      "_owninguser_value",
      "versionnumber",
      "overriddencreatedon",
      "importsequencenumber",
      "_modifiedonbehalfby_value",
      "utcconversiontimezonecode",
      "_createdonbehalfby_value",
      "_owningteam_value",
      "timezoneruleversionnumber"
        };

    private async Task<TableData<JsonObject>> ServerReloadJson(TableState state)
    {
        Error = null;
        //if (_endpoint == null)
        //{
        //    Error = "Endpoint not found for this entity.";
        //    _loading = false;
        //    return new TableData<JsonObject>() { TotalItems = 0, Items = Array.Empty<JsonObject>() };
        //}
        _loading = true;
        StateHasChanged();
        try
        {
            string query = $"{Table.Endpoint}?$top={state.PageSize}&$skiptoken=<cookie pagenumber='{state.Page + 1}' />&$count=true";
            HttpClient.DefaultRequestHeaders.Add("Prefer", "odata.include-annotations=OData.Community.Display.V1.FormattedValue");

            if (state.SortLabel != null)
            {
                query += $"&$orderby={state.SortLabel} {(state.SortDirection == SortDirection.Ascending ? "asc" : "desc")}";
            }
            var response = await HttpClient.GetAsync(query);
            if (!response.IsSuccessStatusCode)
            {
                var errorJson = await response.Content.ReadFromJsonAsync<JsonObject>();
                Console.WriteLine(errorJson);
                Error = errorJson!["error"]!["message"]!.ToString();
                return new TableData<JsonObject>() { TotalItems = 0, Items = Array.Empty<JsonObject>() };

            }
            var result = await response.Content.ReadFromJsonAsync<JsonObject>(); //await HttpClient.GetFromJsonAsync<JsonObject>(query);
            var value = result!["value"]?.AsArray().Select(n => n!.AsObject());
            var count = result["@odata.count"]!.GetValue<int>();

            return new TableData<JsonObject>() { TotalItems = count, Items = value };
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            Console.WriteLine(ex);
            return new TableData<JsonObject>() { TotalItems = 0, Items = Array.Empty<JsonObject>() };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        //InternalName = TableType?.GetCustomAttribute<DynamicsEntityAttribute>()?.Name ?? InternalName;
        ToolbarService.Content =
    @<MudStack Row Class="flex-grow-1">
        <MudStack Spacing="0">
            <MudText Typo="Typo.h6" Style="line-height: 1">@Table.DisplayName</MudText>
            <MudText Typo="Typo.caption">
                @if (Table.HasFriendlyName)
                {
                    @Table.OriginalName
                }
            </MudText>
        </MudStack>
        <MudSpacer></MudSpacer>
                    <MudStack Justify="Justify.Center">
                <MudButton Size="Size.Small" OnClick="OpenCreate" Variant="Variant.Filled" Color="Color.Primary">New...</MudButton>
            </MudStack>
       
            </MudStack>
    ;
        var tables = await SchemaService.GetTablesAsync();
        //var table = tables.FirstOrDefault(t => t.OriginalName == InternalName);
        //var schema = await SchemaService.DocumentTask;
        //var entityType = schema
        //  .Descendants()
        //  .Where(el => el.Name.LocalName == "EntityType")
        //  .Where(el => el.Attribute("Name")!.Value == InternalName)
        //  .First();

        _applicationUsersIds = await ApplicationService.GetApplicationIdsAsync();

        //if (TableType != null)
        //{
        //    var mappingProperties = TableType
        //        .GetProperties()
        //        .Where(p => p.GetCustomAttribute<JsonPropertyNameAttribute>() != null)
        //        .Where(p => p.PropertyType.IsValueType
        //                //|| p.PropertyType.BaseType == typeof(Id)
        //                || p.PropertyType == typeof(string)
        //        );

        //    _properties = mappingProperties.ToDictionary(p => p.GetCustomAttribute<JsonPropertyNameAttribute>()!.Name);
        //    int order = 0;
        //    _columnOrders = mappingProperties.ToDictionary(p => p.GetCustomAttribute<JsonPropertyNameAttribute>()!.Name, p => order++);
        //}
        //_jsonColumns = entityType
        //   .Descendants()
        //   .Where(el => el.Name.LocalName == "Property")
        //   .OrderBy(el => _columnOrders.GetValueOrDefault(el.Attribute("Name")!.Value, 999999))
        //   .Select(el =>
        //   {
        //       var prop = _properties.GetValueOrDefault(el.Attribute("Name")!.Value);
        //       var propType = prop?.PropertyType;
        //       propType = propType != null ? (Nullable.GetUnderlyingType(propType) ?? propType) : null;
        //       var info = new JsonColumnInfo
        //           {
        //               Name = el.Attribute("Name")!.Value,
        //               Type = el.Attribute("Type")!.Value,
        //               FriendlyName = prop?.Name,
        //               FriendlyType = propType?.Name,
        //           };
        //       return info;
        //   }).ToArray();

        //_endpoint = schema
        //   .Descendants()
        //   .Where(el => el.Name.LocalName == "EntitySet")
        //   .Where(el => el.Attribute("EntityType")!.Value.EndsWith($".{InternalName}"))
        //   .Select(el => el.Attribute("Name")!.Value)
        //   .FirstOrDefault();
        StateHasChanged();
        _table?.ReloadServerData();
    }

    private void ShowOptions(ColumnInfo col)
    {
        DialogService.Show<OptionsDialog>($"{Table.DisplayName}.{col.DisplayName} options", new DialogParameters()
        {
            { "Column", col },
            { "Table", Table }
        });
    }

    private async Task OpenCreate()
    {
        var dialogRef = DialogService.Show<EditDialog>("", new DialogParameters
        {
            { "Table", Table }
        });
        var result = await dialogRef.Result;
        if (result.Data is true)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OpenEdit(JsonObject item)
    {
        var dialogRef = DialogService.Show<EditDialog>("", new DialogParameters
        {
            { "Id", item[Table.PrimparyKeyName!]!.GetValue<Guid>() },
            { "Table", Table }
        });
        //var editPageComponentType = typeof(EditPageTemplate<>).MakeGenericType(TableType!);
        //var idPropertyName = TableType!.GetProperty("Id")!.GetCustomAttribute<JsonPropertyNameAttribute>()!.Name;
        //var dialogRef = DialogService.Show(editPageComponentType, $"{TableType.Name} - Edit", new DialogParameters
        //{
        //    { "Id", jsonObject[idPropertyName]!.GetValue<Guid>() }
        //}, new DialogOptions { DisableBackdropClick = true });
        var result = await dialogRef.Result;
        if (result.Data is true)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task DeleteAsync(JsonObject item)
    {
        var confirmed = await DialogService
            .ShowMessageBox(
                "Delete",
                $"Are you sure you want to delete this {Table.DisplayName} item?",
                yesText: "Sim",
                noText: "Não"
            );
        if (confirmed is true)
        {
            try
            {
                _loading = true;
                StateHasChanged();
                string query = $"{Table.Endpoint}({item[Table.PrimparyKeyName!]!.GetValue<Guid>()})";
                await HttpClient.DeleteAsync(query);
                await _table.ReloadServerData();
            }
            catch (Exception ex)
            {
                await DialogService.ShowMessageBox(new MessageBoxOptions
                    {
                        Title = "Error",
                        Message = ex.Message
                    });
                Console.WriteLine(ex);
            }
            finally
            {
                _loading = false;
            }
        }
    }
}

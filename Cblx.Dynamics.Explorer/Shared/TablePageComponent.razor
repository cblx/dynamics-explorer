@using Cblx.Dynamics;
@using Cblx.OData.Client.Abstractions.Ids;
@using Cblx.Dynamics.Explorer.Services;
@using Microsoft.AspNetCore.Components.Rendering;
@using System.Linq.Expressions;
@using System.Reflection;
@using System.Text.Json.Nodes;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http.Json;
@inject IODataClient Client
@inject IDialogService DialogService
@inject ApplicationService ApplicationService
@inject SchemaService SchemaService
@inject HttpClient HttpClient
<PageTitle>@Name</PageTitle>
<div scoped-css>
    <MudTable @ref="_table" ServerData="@(new Func<TableState, Task<TableData<JsonObject>>>(ServerReloadJson))"
              FixedHeader
              FixedFooter
              Bordered
              @bind-Loading="_loading"
              Height="calc(100vh - 180px)"
              Dense Hover>
        <ToolBarContent>
            <MudStack Spacing="0">
                <MudText Typo="Typo.h6">@Name</MudText>
                <MudText Typo="Typo.caption">
                    @if (Name != InternalName)
                    {
                        @InternalName
                    }
                </MudText>
            </MudStack>
            <MudSpacer></MudSpacer>
            @if (TableType != null)
            {
                <MudButton OnClick="OpenCreate" Variant="Variant.Filled" Color="Color.Primary">New...</MudButton>
            }
        </ToolBarContent>
        <ColGroup>
            <col style="width: 150px" />
        </ColGroup>
        <HeaderContent>
            <MudTh></MudTh>
            @foreach (var col in _jsonColumns)
            {
                if (col.Name.EndsWith(".FormattedValue")) { continue; }
                if (_hiddenColumns.Contains(col.Name)) { continue; }
                <MudTh>
                    <MudStack Row>
                        <MudStack>
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudText Color="Color.Secondary">@col.FriendlyName</MudText>
                                <MudText Style="color: gray !important" Typo="Typo.caption">@col.FriendlyType</MudText>
                            </MudStack>
                            <MudStack Row>
                                <MudText Typo="Typo.caption">@col.Name</MudText>
                                <MudText Style="color: gray !important" Typo="Typo.caption">@col.Type</MudText>
                            </MudStack>
                        </MudStack>
                        @if (col.Type is "Edm.Int32" or "Edm.String")
                        {
                            <MudMenu Icon="@Icons.Material.Filled.Menu" AnchorOrigin="Origin.BottomLeft">
                                  <MudMenuItem OnClick="() => ShowOptions(col)">Show options list</MudMenuItem>
                            </MudMenu>
                        }
                        <MudTableSortLabel SortLabel="@col.Name" T="JsonObject">
                            <MudIcon Icon="@Icons.Material.Filled.Sort"></MudIcon>
                        </MudTableSortLabel>
                    </MudStack>
                </MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudStack Row>
                    @{
                        var createdById = context["_createdby_value"]?.GetValue<Guid?>().GetValueOrDefault() ?? Guid.Empty;
                        var canChange = TableType != null && _applicationUsersIds.Contains(createdById);
                    }
                    <MudIconButton OnClick="() => OpenEdit(context)" Disabled="!canChange" Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" Size="Size.Small"></MudIconButton>
                    <MudIconButton OnClick="() => DeleteAsync(context)" Disabled="!canChange" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" Size="Size.Small"></MudIconButton>
                </MudStack>
            </MudTd>
            @foreach (var col in _jsonColumns)
            {
                if (col.Name.EndsWith(".FormattedValue")) { continue; }
                if (_hiddenColumns.Contains(col.Name)) { continue; }
                <MudTd DataLabel="@(col.FriendlyName ?? col.Name)">
                    @{
                        var value = context[col.Name];
                        string formattedValueName = $"{col.Name}@OData.Community.Display.V1.FormattedValue";
                        string? formattedValue = context.ContainsKey(formattedValueName) ? context[formattedValueName]?.GetValue<string>() : null;
                        if (value is null)
                        {
                            <MudText Typo="Typo.caption">NULL</MudText>
                        }
                        else
                        {
                            <MudStack Spacing="0">
                                <MudTooltip Text="@value.ToString()">
                                    <MudText Typo="Typo.overline">@value.ToString()</MudText>
                                </MudTooltip>
                                <MudTooltip Text="@formattedValue">
                                    <MudText Color="Color.Tertiary" Typo="Typo.caption">@formattedValue</MudText>
                                </MudTooltip>
                            </MudStack>
                        }
                    }
                </MudTd>
            }
        </RowTemplate>
        <NoRecordsContent>
            <MudText>
                @if (_endpoint == null)
                {
                    <span>Carregando...</span>
                }
                else
                {
                    <span>Tabela vazia</span>
                }
            </MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Carregando...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>
@code {
    [Parameter]
    public Type? TableType { get; set; }
    [Parameter]
    public string? InternalName { get; set; }

    private string? Name => TableType?.Name ?? InternalName;
    private string? _endpoint;
    private JsonColumnInfo[] _jsonColumns = Array.Empty<JsonColumnInfo>();
    private Dictionary<string, PropertyInfo> _properties = new();
    private Dictionary<string, int> _columnOrders = new();
    private Guid[] _applicationUsersIds = default!;
    private MudTable<JsonObject> _table = default!;
    private bool _loading = false;
    private readonly string[] _hiddenColumns = new string[]
    {
      "@odata.etag",
      "_owningbusinessunit_value",
      "_ownerid_value",
      "_owninguser_value",
      "versionnumber",
      "overriddencreatedon",
      "importsequencenumber",
      "_modifiedonbehalfby_value",
      "utcconversiontimezonecode",
      "_createdonbehalfby_value",
      "_owningteam_value",
      "timezoneruleversionnumber"
    };

    private async Task<TableData<JsonObject>> ServerReloadJson(TableState state)
    {
        if (_endpoint == null) { return new TableData<JsonObject>() { TotalItems = 0, Items = Array.Empty<JsonObject>() }; }
        _loading = true;
        StateHasChanged();
        try
        {
            string query = $"{_endpoint}?$top={state.PageSize}&$skiptoken=<cookie pagenumber='{state.Page + 1}' />&$count=true";
            HttpClient.DefaultRequestHeaders.Add("Prefer", "odata.include-annotations=OData.Community.Display.V1.FormattedValue");

            if (state.SortLabel != null)
            {
                query += $"&$orderby={state.SortLabel} {(state.SortDirection == SortDirection.Ascending ? "asc" : "desc")}";
            }

            var result = await HttpClient.GetFromJsonAsync<JsonObject>(query);
            var value = result!["value"]?.AsArray().Select(n => n!.AsObject());
            var count = result["@odata.count"]!.GetValue<int>();

            return new TableData<JsonObject>() { TotalItems = count, Items = value };
        }
        finally
        {
            _loading = false;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        InternalName = TableType?.GetCustomAttribute<DynamicsEntityAttribute>()?.Name ?? InternalName;

        var schema = await SchemaService.DocumentTask;
        var entityType = schema
          .Descendants()
          .Where(el => el.Name.LocalName == "EntityType")
          .Where(el => el.Attribute("Name")!.Value == InternalName)
          .First();

        _applicationUsersIds = await ApplicationService.GetApplicationIdsAsync();

        if (TableType != null)
        {
            var mappingProperties = TableType
                .GetProperties()
                .Where(p => p.GetCustomAttribute<JsonPropertyNameAttribute>() != null)
                .Where(p => p.PropertyType.IsValueType
                        || p.PropertyType.BaseType == typeof(Id)
                        || p.PropertyType == typeof(string)
                );

            _properties = mappingProperties.ToDictionary(p => p.GetCustomAttribute<JsonPropertyNameAttribute>()!.Name);
            int order = 0;
            _columnOrders = mappingProperties.ToDictionary(p => p.GetCustomAttribute<JsonPropertyNameAttribute>()!.Name, p => order++);
        }
        _jsonColumns = entityType
           .Descendants()
           .Where(el => el.Name.LocalName == "Property")
           .OrderBy(el => _columnOrders.GetValueOrDefault(el.Attribute("Name")!.Value, 999999))
           .Select(el =>
           {
               var prop = _properties.GetValueOrDefault(el.Attribute("Name")!.Value);
               var propType = prop?.PropertyType;
               propType = propType != null ? (Nullable.GetUnderlyingType(propType) ?? propType) : null;
               var info = new JsonColumnInfo
                   {
                       Name = el.Attribute("Name")!.Value,
                       Type = el.Attribute("Type")!.Value,
                       FriendlyName = prop?.Name,
                       FriendlyType = propType?.Name,
                   };
               return info;
           }).ToArray();

        _endpoint = schema
           .Descendants()
           .Where(el => el.Name.LocalName == "EntitySet")
           .Where(el => el.Attribute("EntityType")!.Value.EndsWith($".{InternalName}"))
           .Select(el => el.Attribute("Name")!.Value)
           .FirstOrDefault();
        StateHasChanged();
        _table?.ReloadServerData();
    }

    private void ShowOptions(JsonColumnInfo col)
    {
        DialogService.Show<OptionsDialog>($"{Name}.{col.FriendlyName ?? col.Name} options", new DialogParameters()
        {
            { "Column", col },
            { "Name", Name },
            { "InternalName", InternalName }
        });
      
    }

    private async Task OpenCreate()
    {
        var editPageComponentType = typeof(EditPageTemplate<>).MakeGenericType(TableType!);
        var dialogRef = DialogService.Show(editPageComponentType, $"Criar item em {TableType!.Name}", new DialogOptions { DisableBackdropClick = true });
        var result = await dialogRef.Result;
        if (result.Data is true)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OpenEdit(JsonObject jsonObject)
    {
        var editPageComponentType = typeof(EditPageTemplate<>).MakeGenericType(TableType!);
        var idPropertyName = TableType!.GetProperty("Id")!.GetCustomAttribute<JsonPropertyNameAttribute>()!.Name;
        var dialogRef = DialogService.Show(editPageComponentType, $"Editar item em {TableType.Name}", new DialogParameters
        {
            { "Id", jsonObject[idPropertyName]!.GetValue<Guid>() }
        }, new DialogOptions { DisableBackdropClick = true });
        var result = await dialogRef.Result;
        if (result.Data is true)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task DeleteAsync(JsonObject item)
    {
        var confirmed = await DialogService
            .ShowMessageBox(
                "Delete",
                $"Are you sure you want to delete this {Name} item?",
                yesText: "Sim",
                noText: "Não"
            );
        if (confirmed is true)
        {
            try
            {
                _loading = true;
                StateHasChanged();
                var idPropertyName = TableType!.GetProperty("Id")!.GetCustomAttribute<JsonPropertyNameAttribute>()!.Name;
                string query = $"{_endpoint}({item[idPropertyName]!.GetValue<Guid>()})";
                await HttpClient.DeleteAsync(query);
                await _table.ReloadServerData();
            }
            catch (Exception ex)
            {
                await DialogService.ShowMessageBox(new MessageBoxOptions
                    {
                        Title = "Error",
                        Message = ex.Message
                    });
                Console.WriteLine(ex);
            }
            finally
            {
                _loading = false;
            }
        }
    }
}

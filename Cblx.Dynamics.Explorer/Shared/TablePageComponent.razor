@using Cblx.Dynamics.Explorer.Models;
@using Cblx.Dynamics.Explorer.Services;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.ListEntityAttributes;
@using Microsoft.AspNetCore.Components.Rendering;
@using System.Linq.Expressions;
@using System.Reflection;
@using System.Text.Json.Nodes;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net.Http.Json;
@inject IDialogService DialogService
@inject ApplicationService ApplicationService
@inject SchemaService SchemaService
@inject HttpClient HttpClient
@inject AppBarService AppBarService
@inject IGetEntityForTableHandler GetEntityHandler
<PageTitle>@Table.DisplayName</PageTitle>
<div scoped-css>
    <MudTable @ref="_table" ServerData="@(new Func<TableState, Task<TableData<JsonObject>>>(ServerReloadJson))"
                FixedHeader
                FixedFooter
                Bordered
    @bind-Loading="_loading"
              Height="calc(100vh - 100px)"
                Dense Hover>
        <ColGroup>
            <col style="width: 150px" />
        </ColGroup>
        <HeaderContent>
            <MudTh></MudTh>
            @foreach (var attr in _entity?.Attributes ?? Array.Empty<AttributeDto>())
            {
                <MudTh Style="padding: 2px;">
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.caption" Color="Color.Primary">@attr.LogicalName</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Style="line-height: 1; white-space: nowrap">@(attr.DisplayName ?? "-")</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Tertiary">@(attr.CustomName ?? "-")</MudText>
                            <MudStack Row>
                                <MudText Typo="Typo.caption" Color="Color.Warning">@attr.AttributeType</MudText>
                                <MudText Typo="Typo.caption" Style="color: gray">@((attr.DerivedType ?? "-").Split('.').Last())</MudText>
                            </MudStack>
                            </MudStack>
                            @if (attr.AttributeType is "Picklist")
                        {
                            <MudMenu Icon="@Icons.Material.Filled.Menu" AnchorOrigin="Origin.BottomLeft">
                                <MudMenuItem OnClick="() => ShowOptions(attr)">Show options list</MudMenuItem>
                            </MudMenu>
                        }
                        <MudTableSortLabel SortLabel="@attr.LogicalName" T="JsonObject">
                            <MudIcon Icon="@Icons.Material.Filled.Sort"></MudIcon>
                        </MudTableSortLabel>
                    </MudStack>
                </MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudStack Row>
                    @{
                        var canChange = true;
                    }
                    <MudIconButton OnClick="() => OpenEdit(context)" Disabled="!canChange" Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" Size="Size.Small"></MudIconButton>
                    <MudIconButton OnClick="() => DeleteAsync(context)" Disabled="!canChange" Color="Color.Error" Icon="@Icons.Material.Outlined.Delete" Size="Size.Small"></MudIconButton>
                </MudStack>
            </MudTd>
            @foreach (var attr in _entity?.Attributes ?? Array.Empty<AttributeDto>())
            {
                <MudTd DataLabel="@(attr.LogicalName)">
                    @{
                        var value = context[attr.LogicalName];
                        string formattedValueName = $"{attr.LogicalName}@OData.Community.Display.V1.FormattedValue";
                        string? formattedValue = context.ContainsKey(formattedValueName) ? context[formattedValueName]?.GetValue<string>() : null;
                        if (value is null)
                        {
                            <MudText Typo="Typo.caption" Style="font-style: italic; color: gray">NULL</MudText>
                        }
                        else
                        {
                            <MudStack Spacing="0">
                                <MudTooltip Text="@value.ToString()">
                                    <MudText Typo="Typo.overline">@value.ToString()</MudText>
                                </MudTooltip>
                                <MudTooltip Text="@formattedValue">
                                    <MudText Color="Color.Tertiary" Typo="Typo.caption">@formattedValue</MudText>
                                </MudTooltip>
                            </MudStack>
                        }
                    }
                </MudTd>
            }
        </RowTemplate>
        <NoRecordsContent>
            @if (Error != null)
            {
                <MudAlert Severity="Severity.Error">@Error</MudAlert>
            }
            else
            {
                <MudAlert Severity="Severity.Warning">Empty table</MudAlert>
            }
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>
@code {
    [Parameter]
    [EditorRequired]
    public required TableInfo Table { get; set; }
    private string? Error = null;
    private Dictionary<string, PropertyInfo> _properties = new();
    private Dictionary<string, int> _columnOrders = new();
    private Guid[] _applicationUsersIds = default!;
    private MudTable<JsonObject> _table = default!;
    private EntityDto? _entity = null;
    private bool _loading = false;
    private async Task<TableData<JsonObject>> ServerReloadJson(TableState state)
    {
        Error = null;
        _loading = true;
        StateHasChanged();
        try
        {
            string query = $"{_entity!.EntitySetName}?$top={state.PageSize}&$skiptoken=<cookie pagenumber='{state.Page + 1}' />&$count=true";
            HttpClient.DefaultRequestHeaders.Add("Prefer", "odata.include-annotations=OData.Community.Display.V1.FormattedValue");

            if (state.SortLabel != null)
            {
                query += $"&$orderby={state.SortLabel} {(state.SortDirection == SortDirection.Ascending ? "asc" : "desc")}";
            }
            var response = await HttpClient.GetAsync(query);
            if (!response.IsSuccessStatusCode)
            {
                var errorJson = await response.Content.ReadFromJsonAsync<JsonObject>();
                Console.WriteLine(errorJson);
                Error = errorJson!["error"]!["message"]!.ToString();
                return new TableData<JsonObject>() { TotalItems = 0, Items = Array.Empty<JsonObject>() };

            }
            var result = await response.Content.ReadFromJsonAsync<JsonObject>(); //await HttpClient.GetFromJsonAsync<JsonObject>(query);
            var value = result!["value"]?.AsArray().Select(n => n!.AsObject());
            var count = result["@odata.count"]!.GetValue<int>();

            return new TableData<JsonObject>() { TotalItems = count, Items = value };
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            Console.WriteLine(ex);
            return new TableData<JsonObject>() { TotalItems = 0, Items = Array.Empty<JsonObject>() };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        AppBarService.SetContent(GetAppBarContent(Table.OriginalName));
        _entity = await GetEntityHandler.GetAsync(Table.OriginalName);
        AppBarService.SetContent(GetAppBarContent(_entity.LogicalName, _entity.DisplayName, _entity.CustomName));
        _applicationUsersIds = await ApplicationService.GetApplicationIdsAsync();

        StateHasChanged();
        _table?.ReloadServerData();
    }

    private RenderFragment GetAppBarContent(string logicalName, string? displayName = null, string? customName = null) =>
        @<MudStack    
        Row
            Class="flex-grow-1">
                <MudStack Spacing="0">
                <MudText Typo="Typo.caption" Style="line-height: 1.2" Color="Color.Primary">@logicalName</MudText>
                <MudText Typo="Typo.caption" Style="line-height: 1.2" Color="Color.Secondary">@(displayName ?? "-")</MudText>
                <MudText Typo="Typo.caption" Style="line-height: 1.2" Color="Color.Tertiary">@(customName ?? "-")</MudText>
            </MudStack>
            <MudSpacer></MudSpacer>
            <MudStack Justify="Justify.Center">
                <MudButton Size="Size.Small" OnClick="OpenCreate" Variant="Variant.Filled" Color="Color.Primary">New...</MudButton>
            </MudStack>

        </MudStack>;


    private void ShowOptions(AttributeDto attr)
    {
        DialogService.Show<OptionsDialog>($"{_entity!.LogicalName}.{attr.LogicalName} options", new DialogParameters()
        {
            { "Attribute", attr },
            { "EntityLogicalName", _entity.LogicalName }
        });
    }

    private async Task OpenCreate()
    {
        var dialogRef = DialogService.Show<EditDialog>("", new DialogParameters
        {
            { "Table", Table }
        });
        var result = await dialogRef.Result;
        if (result.Data is true)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task OpenEdit(JsonObject item)
    {
        var dialogRef = DialogService.Show<EditDialog>("", new DialogParameters
        {
            { "Id", item[_entity!.PrimaryId]!.GetValue<Guid>() },
            { "Table", Table }
        });
        var result = await dialogRef.Result;
        if (result.Data is true)
        {
            await _table.ReloadServerData();
        }
    }

    private async Task DeleteAsync(JsonObject item)
    {
        var confirmed = await DialogService
            .ShowMessageBox(
                "Delete",
                $"Are you sure you want to delete this {_entity!.CustomName ?? _entity.LogicalName} item?",
                yesText: "Sim",
                noText: "Não"
            );
        if (confirmed is true)
        {
            try
            {
                _loading = true;
                StateHasChanged();
                string query = $"{_entity.EntitySetName}({item[_entity.PrimaryId]!.GetValue<Guid>()})";
                await HttpClient.DeleteAsync(query);
                await _table.ReloadServerData();
            }
            catch (Exception ex)
            {
                await DialogService.ShowMessageBox(new MessageBoxOptions
                    {
                        Title = "Error",
                        Message = ex.Message
                    });
                Console.WriteLine(ex);
            }
            finally
            {
                _loading = false;
            }
        }
    }
}

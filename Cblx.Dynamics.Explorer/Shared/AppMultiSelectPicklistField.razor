@using System.Text.Json.Nodes;
@using System.Net.Http.Json;
@using Cblx.Dynamics.Explorer.Models;
@using Cblx.Dynamics.Explorer.Services.DynamicsServices.ListMultiSelectPicklistOptions;
@inject IListMultiSelectPicklistOptionsHandler Handler
@if (Options != null)
{
    <MudSelect T="string"
               Label="Value"
               Variant="Variant.Outlined"
               MultiSelection
               HelperText="@Set.ValueHelperText"
               MultiSelectionTextFunc="@((items) => {
                                        return string.Join(", ", items.Select(textValue => {
                                            var option = Options.FirstOrDefault(o => o.Value.ToString() == textValue);
                                            return option != null ? option.Text : textValue;
                                        }));
                                    })"
               SelectedValues="@(Set.ValueAsString?.Split(','))"
               SelectedValuesChanged="@(val => {
                                        if(val.Any())
                                        {
                                            Set.ValueAsString = string.Join(",", val);
                                        }
                                        else
                                        {
                                            Set.ValueAsString = null;
                                        }
                                    })">
        @foreach (var option in Options)
        {
            <MudSelectItem Value="@(option.Value.ToString())">@option.Text</MudSelectItem>
        }
    </MudSelect>
}
@code {
    [Parameter]
    [EditorRequired]
    public required EditDialogSet Set { get; set; }
    private PicklistOption[]? Options = null;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var attribute = Set.Attribute!;
            Options = await Handler.GetAsync(attribute.EntityLogicalName, attribute.LogicalName);
        }
        catch { }
    }
}

@using System.Reflection;
@using Cblx.Dynamics.Explorer.Models;
@using System.Net.Http.Json;
@using System.Text.Json.Nodes;
@inject IDialogService DialogService
@inject EditDialogService EditDialogService
@inject HttpClient HttpClient
<div style="display: contents">
    <MudDialog Style="width: 800px; max-width: 800px" Class="fix">
        <TitleContent>
            <MudStack Spacing="0">
                <MudText>@Table.DisplayName</MudText>
                @if (Table.HasFriendlyName)
                {
                    <MudText Typo="Typo.caption">@Table.OriginalName</MudText>
                }
                <MudDivider />
            </MudStack>
        </TitleContent>
        <DialogContent>
            <MudStack>
                @foreach (var set in _sets)
                {
                    <MudStack Row>
                    <MudStack Class="flex-1 overflow-hidden">
                        <AppSetFieldField Set="set" Sets="_sets" Table="Table" OnChange="() => StateHasChanged()" />
                    </MudStack>
                    <MudStack Class="flex-1" AlignItems="AlignItems.Stretch" Justify="Justify.Center">
                        <AppSetValueField Set="set" />
                    </MudStack>
                    <MudStack>
                        <MudIconButton OnClick="() => _sets.Remove(set)"
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       Icon="@Icons.Material.Filled.Remove"
                                       Class="flex-grow-0"></MudIconButton>
                    </MudStack>
                </MudStack>
                }
                <MudStack Row Reverse>
                    <MudButton OnClick="AddFieldSet" StartIcon="@Icons.Material.Filled.Add">Add field</MudButton>
                </MudStack>
                <MudDivider />
            </MudStack>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
        </DialogActions>
    </MudDialog>
    <MudOverlay @bind-Visible="_saving" DarkBackground>
        <MudProgressCircular Indeterminate Color="Color.Secondary"></MudProgressCircular>
    </MudOverlay>
</div>
@code {
    private bool _loading = true;
    private bool _saving = false;
    private PropertyInfo[] _fields = Array.Empty<PropertyInfo>();
    private Dictionary<PropertyInfo, PicklistOption[]> _options = new();

    private List<EditDialogSet> _sets = new();

    [Parameter]
    public TableInfo Table { get; set; } = default!;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    [Parameter]
    public Guid? Id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!Id.HasValue)
            {
                _sets.Add(new EditDialogSet()
                    {
                        Column = Table.Columns.FirstOrDefault(c => c.IsPrimaryKey),
                        Value = Guid.NewGuid().ToString()
                    });
            }
            else
            {
                var current = await HttpClient.GetFromJsonAsync<JsonObject>($"{Table.Endpoint}({Id})");
                foreach (var col in Table.Columns.Where(c => c.IsEditable))
                {
                    var jsonVal = current![col.OriginalName];
                    if (jsonVal is null) { continue; }
                    var set = new EditDialogSet { Column = col };
                    set.Value = col.TypeName switch
                    {
                        "Edm.String" => jsonVal.GetValue<string>(),
                        "Edm.Int32" => jsonVal.GetValue<int>(),
                        "Edm.Int64" => jsonVal.GetValue<long>(),
                        "Edm.Boolean" => jsonVal.GetValue<bool>(),
                        "Edm.DateTimeOffset" => jsonVal.GetValue<DateTime>(),
                        "Edm.Date" => DateOnly.FromDateTime(jsonVal.GetValue<DateTime>()),
                        "Edm.Decimal" => jsonVal.GetValue<decimal>(),
                        "Edm.Double" => jsonVal.GetValue<double>(),
                        "Edm.Guid" => jsonVal.GetValue<string>().ToString(),
                        _ => null
                    };
                    set.AcceptValue();
                    _sets.Add(set);
                }
            }
        }
        finally
        {
            _loading = false;
        }
    }

    void AddFieldSet()
    {
        var firstMissingColumn = Table.Columns.Where(c => c.IsEditable).Where(c => !_sets.Any(s => s.Column == c)).FirstOrDefault();
        if (firstMissingColumn is null) { return; }
        _sets.Add(new EditDialogSet { Column = firstMissingColumn });
    }

    async Task Submit()
    {
        _saving = true;
        try
        {
            if (Id.HasValue)
            {
                await EditDialogService.PatchAsync(Id.Value, Table, _sets.ToArray());
            }
            else
            {
                await EditDialogService.PostAsync(Table, _sets.ToArray());
            }
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox(new MessageBoxOptions
                {
                    Title = "Error",
                    Message = ex.Message
                });
            Console.WriteLine(ex);
        }
        finally
        {
            _saving = false;
        }
    }
    void Cancel() => MudDialog.Cancel();

}

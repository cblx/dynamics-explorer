@using System.Reflection;
@using Cblx.Dynamics;
@using Cblx.OData.Client.Abstractions.Ids;
@using System.Text.Json.Serialization;
@using System.Linq.Expressions;
@typeparam TTable where TTable: class, new()
@inject IODataClient Client
@inject IDialogService DialogService
<MudDialog Style="width: 600px" DisableSidePadding>
    <DialogContent>
        @if (_loading)
        {
            <MudStack AlignItems="AlignItems.Center">
                <MudProgressCircular Style="margin: 0 auto" Indeterminate></MudProgressCircular>
            </MudStack>
        }
        else
        {
            <MudContainer Style="max-height: calc(100vh - 160px); overflow-y: scroll">
                <MudForm>
                    <MudStack>
                        @foreach (var field in _fields)
                        {
                            var value = field.GetValue(_model);
                            string? stringValue = value?.ToString();
                            int? intValue = value as int?;
                            if (value is Enum)
                            {
                                intValue = (int)value;
                            }
                            bool? boolValue = value as bool?;
                            DateTimeOffset? dateTimeOffset = value as DateTimeOffset?;
                            DateOnly? dateOnly = value as DateOnly?;
                            var undelyingType = Nullable.GetUnderlyingType(field.PropertyType) ?? field.PropertyType!;
                            RenderFragment fragment = field.PropertyType switch
                            {

                                var t when t == typeof(bool?) =>
                    @<MudCheckBox Checked="boolValue"
                                  CheckedChanged="(bool? isChecked) => field.SetValue(_model, isChecked)" TriState>@field.Name</MudCheckBox>,
                                var t when t.BaseType == typeof(Id) =>
                                @<MudTextField Value="stringValue"
                                   T="string"
                                   Mask="@(new PatternMask("********-****-****-****-************"))"
                                   Validation="(string val) => Guid.TryParse(val, out var _)"
                                   ValueChanged="val => SetId(field, val)"
                                   Label="@field.Name"></MudTextField>,
                                var t when t == typeof(DateTimeOffset) || t == typeof(DateTimeOffset?) =>
                                @<MudTextField Value="@(dateTimeOffset?.ToString("yyyy-MM-dd HH:mm:ss zzz"))"
                                   T="string"
                                   Placeholder="0000-00-00 00:00:00 +00:00"
                                   Mask="@(new PatternMask("0000-00-00 00:00:00 x00:00"){
                                           MaskChars = new[]
                                           {
                                               new MaskChar('0', @"\d"),
                                               new MaskChar('x', @"[\-\+]")
                                           }
                                        })"
                                   Validation="(string val) => DateTimeOffset.TryParse(val, out var _)"
                                   ValueChanged="val => field.SetValue(_model, DateTimeOffset.TryParse(val, out var dt) ? dt : null)"
                                   Label="@field.Name"></MudTextField>,
                                var t when t == typeof(DateOnly) || t == typeof(DateOnly?) =>
                                @<MudDatePicker Label="@field.Name"
                                    Date="dateOnly.HasValue ? dateOnly.Value.ToDateTime(default(TimeOnly)) : null"
                                    DateChanged="dt => field.SetValue(_model, dt.HasValue ? DateOnly.FromDateTime(dt.Value) : null)">
                                </MudDatePicker>,
                                var t when _options.ContainsKey(field) && (t == typeof(int) || t == typeof(int?) || t.IsEnum || undelyingType.IsEnum) =>
                                @<MudSelect T="int?" Label="@field.Name" Value="intValue" ValueChanged="val => SetOptionValue(field, val)">
                                    <MudSelectItem Value="default(int?)">NULL</MudSelectItem>
                                    @foreach (var option in _options[field])
                                        {
                                            <MudSelectItem Value="@((int?)option.Value)">@option.Value - @option.Text</MudSelectItem>
                                        }
                                    </MudSelect>,
                                var t when _options.ContainsKey(field) && t == typeof(string) =>
                                @<div><MudSelect T="string" Label="@field.Name" MultiSelection
                                    MultiSelectionTextFunc="@((items) => { 
                                        return string.Join(", ", items.Select(textValue => { 
                                            var option = _options[field].FirstOrDefault(o => o.Value.ToString() == textValue);
                                            return option != null ? $"{option.Value} - {option.Text}" : textValue; 
                                        }));
                                    })"
                                    SelectedValues="@(stringValue?.Split(','))" SelectedValuesChanged="@(val => { 
                                        if(val.Any())
                                        {
                                            field.SetValue(_model, string.Join(",", val));
                                        }
                                        else
                                        {
                                            field.SetValue(_model, null); 
                                        }
                                    })">
                                    @foreach (var option in _options[field])
                                        {
                                            <MudSelectItem Value="@(option.Value.ToString())">@option.Value - @option.Text</MudSelectItem>
                                        }
                                        </MudSelect>
                                        @stringValue
                                    </div>,
                                var t when t == typeof(int) || t == typeof(int?) =>
                                @<MudNumericField T="int?"
                                      Label="@field.Name"
                                      ValueChanged="val => field.SetValue(_model, val)"
                                      Value="intValue" />,
                                var t when t == typeof(string) =>
                                @<MudTextField Value="stringValue"
                                   T="string"
                                   ValueChanged="val => field.SetValue(_model, val)"
                                   Label="@field.Name"></MudTextField>,
                                _ => @<div></div>
                            };
                            @fragment
                            ;
                        }
                    </MudStack>
                </MudForm>
            </MudContainer>
        }
    </DialogContent>
    <DialogActions>
        @if (!_loading)
        {
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
        }
    </DialogActions>
</MudDialog>
<MudOverlay @bind-Visible="_saving" DarkBackground>
    <MudProgressCircular Indeterminate Color="Color.Secondary"></MudProgressCircular>
</MudOverlay>
@code {
    private TTable _model = new TTable();
    private bool _loading = true;
    private bool _saving = false;
    private PropertyInfo[] _fields = Array.Empty<PropertyInfo>();
    private Dictionary<PropertyInfo, PicklistOption[]> _options = new();


    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Guid? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        try
        {
            var set = Client.From<TTable>();

            if (Id.HasValue)
            {
                _model = await set.FindAsync(Id.Value);
            }
            else
            {
                var idProp = _model.GetType().GetProperty("Id");
                _model.GetType().GetProperty("Id")!.SetValue(_model, Activator.CreateInstance(idProp!.PropertyType, Guid.NewGuid()));
            }

            _fields = typeof(TTable)
                 .GetProperties()
                 .Where(p => p.PropertyType.IsValueType
                         || p.PropertyType.BaseType == typeof(Id)
                         || p.PropertyType == typeof(string)
                 ).ToArray();

            var parameterExpression = Expression.Parameter(typeof(TTable));
            foreach (var field in _fields)
            {
                var type = field.PropertyType;
                type = Nullable.GetUnderlyingType(type) ?? type;
                if (type == typeof(int?) || type == typeof(int) || type.IsEnum)
                {
                    try
                    {
                        var getPickListOptionsMethod = set.GetType().GetMethod(nameof(set.GetNonGenericPicklistOptionsAsync));
                        var memberAccessLambda = Expression.Lambda(
                            Expression.Convert(
                                Expression.MakeMemberAccess(
                                    parameterExpression,
                                    field
                                ),
                                typeof(object)
                            ),
                            parameterExpression
                        );

                        var picklistOptionsTask = (Task<PicklistOption[]>)getPickListOptionsMethod!.Invoke(set, new object[] { memberAccessLambda })!;
                        _options[field] = await picklistOptionsTask;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                        // Ok if can't find options
                    }
                }
                if (type == typeof(string))
                {
                    try
                    {
                        var getPickListOptionsMethod = set.GetType().GetMethod(nameof(set.GetNonGenericMultiSelectPicklistOptionsAsync));
                        var memberAccessLambda = Expression.Lambda(
                                Expression.MakeMemberAccess(
                                    parameterExpression,
                                    field
                                ),
                            parameterExpression
                        );

                        var picklistOptionsTask = (Task<PicklistOption[]>)getPickListOptionsMethod!.Invoke(set, new object[] { memberAccessLambda })!;
                        _options[field] = await picklistOptionsTask;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex);
                        // Ok if can't find options
                    }
                }
            }
        }
        finally
        {
            _loading = false;
        }
    }

    void SetId(PropertyInfo property, string guidAsString)
    {
        if (Guid.TryParse(guidAsString, out var g))
        {
            property.SetValue(_model, Activator.CreateInstance(property.PropertyType, g));
        }
    }

    void SetOptionValue(PropertyInfo propertyInfo, int? value)
    {
        try
        {
            var type = Nullable.GetUnderlyingType(propertyInfo.PropertyType) ?? propertyInfo.PropertyType;
            if (type.IsEnum)
            {
                if (value == null)
                {
                    propertyInfo.SetValue(_model, null);
                }
                else
                {
                    var enumValue = Enum.ToObject(type, value.Value);
                    propertyInfo.SetValue(_model, enumValue);
                }
            }
            else
            {
                propertyInfo.SetValue(_model, value);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    async Task Submit()
    {
        var body = new Body<TTable>();
        _saving = true;
        try
        {
            var allProps = typeof(TTable).GetProperties();
            foreach (var field in _fields)
            {
                string fieldName = field.GetCustomAttribute<JsonPropertyNameAttribute>()?.Name ?? field.Name;
                if (field.PropertyType.BaseType == typeof(Id) && field.Name != "Id")
                {
                    var id = field.GetValue(_model);
                    if (id != null)
                    {
                        var guid = (Guid)id.GetType().GetProperty("Guid")!.GetValue(id)!;
                        var navProp = allProps.FirstOrDefault(f => f.GetCustomAttribute<ReferentialConstraintAttribute>()?.Property == fieldName);
                        if (navProp == null)
                        {
                            throw new InvalidOperationException($"Could not find the navigation property associated with {fieldName}. Please create a navigation property annotated with [ReferentialConstraint(..)]");
                        }
                        body.Bind(navProp.GetCustomAttribute<JsonPropertyNameAttribute>()!.Name, guid);
                    }
                }
                else
                {
                    body.Set(fieldName, field.GetValue(_model));
                }
            }
            if (Id.HasValue)
            {
                await Client.Patch(Id, body);
            }
            else
            {
                await Client.Post(body);
            }
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            await DialogService.ShowMessageBox(new MessageBoxOptions
                {
                    Title = "Error",
                    Message = ex.Message
                });
            Console.WriteLine(ex);
        }
        finally
        {
            _saving = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}

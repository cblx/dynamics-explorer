@using Cblx.Dynamics.Explorer.Models;
<MudSelect Variant="Variant.Outlined"
           HelperText="@(Set.Column?.HasFriendlyName is true ? Set.Column.OriginalName : "")"
           Label="Field" @bind-Value="Set.Column" @bind-Value:after="AfterChange">

    @foreach (var column in Table.Columns.Where(c => c.IsEditable).Where(c => c == Set.Column || !Sets.Any(s => s.Column == c)))
    {
        <MudSelectItem Value="column">
            <MudStack Spacing="0" Style="margin-top: -4px">
                <MudStack Class="flex-grow-1" Spacing="0">
                    <MudText Typo="Typo.caption" Style="line-height: 1" Color="Color.Secondary">@column.DisplayName</MudText>
                    @if (column.HasFriendlyName)
                    {
                        <MudText Typo="Typo.caption" Style="line-height: 1">@column.OriginalName</MudText>
                    }
                </MudStack>
                <MudStack AlignItems="AlignItems.Start" Class="flex-grow-0">
                    <MudText Typo="Typo.caption" Style="color: gray !important; line-height: 1">@column.TypeName</MudText>
                </MudStack>
            </MudStack>
        </MudSelectItem>
    }
</MudSelect>
@code {
    [Parameter]
    [EditorRequired]
    public TableInfo Table { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public EditDialogSet Set { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public List<EditDialogSet> Sets { get; set; } = default!;

    [Parameter]
    public EventCallback OnChange { get; set; }

    public void AfterChange()
    {
        Set.Value = null;
        OnChange.InvokeAsync(null);

    }
}
